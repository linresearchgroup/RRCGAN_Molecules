# -*- coding: utf-8 -*-
"""Fingerprint.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RD2tgwK_MFPMNuiuM2NuaN0oNhohNRyM
"""

import pickle
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import re
from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.Chem import Descriptors

from chainer_chemistry.dataset.preprocessors import GGNNPreprocessor
preprocessor = GGNNPreprocessor()

from chainer_chemistry.datasets.molnet import get_molnet_dataset

"""
data = get_molnet_dataset('qm9', 
                          labels = ['homo','lumo','gap','r2','zpve','u0','u298','h298','g298','cv'],
                          preprocessor = preprocessor,
                          return_smiles = True, 
                          frac_train = 1.0,
                          frac_valid = 0.0,
                          frac_test = 0.0
                         )

with open ("Data_other_properties.pickle", 'wb') as f:
    pickle.dump(data,f)
"""

with open ("Data_other_properties.pickle", 'rb') as f:
   data = pickle.load(f)
"""
X_smiles = []
X_atoms = []
X_bonds = []
cv = []
gap = []
r2 = []
zpve = []
u0 = []
u298 = []
h298 = []
g298 = []
E_homo = []
E_lumo = []

atom_lengths = []
atom_max = []
bonds_lengths = []

for smiles in data['smiles'][0]:
    # smiles += '.'
    X_smiles.append(smiles)

for d in data['dataset'][0]:
    X_atoms.append(d[0])
    X_bonds.append(d[1])
    
    atom_lengths.append(len(d[0]))
    atom_max.append(np.max(d[0]))
    bonds_lengths.append(d[1].shape[1])

    E_homo.append(d[2][0])
    E_lumo.append(d[2][1])
    gap.append(d[2][2])
    r2.append(d[2][3])
    zpve.append(d[2][4])
    u0.append(d[2][5])
    u298.append(d[2][6])
    h298.append(d[2][7])
    g298.append(d[2][8])
    cv.append(d[2][9])

with open('database_Homo_Lomo_cv_SMILES.pickle', 'wb') as f:
    pickle.dump((X_smiles, X_atoms, X_bonds, E_homo, E_lumo,gap,r2,zpve,u0,u298,h298,g298, cv), f)
"""
# you need to run above codes if you do not have the .pickle data
with open('database_Homo_Lomo_cv_SMILES.pickle', 'rb') as f:
    X_smiles, X_atoms, X_bonds, E_homo, E_lumo, gap, r2, zpve, u0, u298, h298, g298, cv = pickle.load(f)

print ("For smiles: {}, E_homo: {}, E_lumo: {},gap {},r2 {},zpve {},u0 {},u298 {},h298: {},g298: {},Cv: {} "
           .format (X_smiles [0], E_homo[0], E_lumo[0],gap [0],
                    r2[0],zpve [0],u0 [0],u298[0],h298 [0],g298 [0],cv[0]))
SMILES = []

for smiles in data['smiles'][0]:
    SMILES.append(smiles)
    


print (SMILES[1])
m = AllChem.MolFromSmiles(SMILES[1])
output = Chem.MolToMolBlock(m)
print ("this is output: ", output)
print ("this is re.sub", re.sub('[\W+\d+H]', '', SMILES[1]))

print (len(re.sub('[\W+\d+H]', '', SMILES[1])))

print ("this is m: ", m)

coord = np.array([a.split()[:3] for a in output.split('\n')[4:(4+9)]]).astype(float)


print ("this is 2D coordinates", coord)
plt.scatter(coord[:,0], coord[:,1],
            c = ['black',
                 'blue',
                 'black',
                 'black',
                 'blue',
                 'black',
                 'black',
                 'red',
                 'blue'],
            s = [6 * 40,
                 7 * 40,
                 6 * 40,
                 6 * 40,
                 7 * 40,
                 6 * 40,
                 6 * 40,
                 8 * 40,
                 7 * 40],
            alpha = 0.5)
plt.savefig("smiles.png")
coords = []
pure_atoms = []
_3Ds = 0

for smiles in SMILES:
    m = AllChem.MolFromSmiles(smiles)
    output = Chem.MolToMolBlock(m)
    if output.split('\n')[1].split()[1]=='3D':
        _3Ds += 1
    
    pure_atom = re.sub('[\W+\d+H]', '', smiles)
    stop = len(pure_atom)
    pure_atoms.append(pure_atom)
    
    coord = np.array([a.split()[:3] for a in output.split('\n')[4:(4+stop)]]).astype(float)
    coords.append(coord)
print ("this is _3Ds: ",_3Ds)
print ("len(coords) {}, len(SMILES) {}, len(cv) {}, len(pure_atoms) {}".format(len(coords), len(SMILES), len(cv), len(pure_atoms)))

print (coords[1])
"""
with open('coordinates.pickle', 'wb') as f:
    pickle.dump((coords, SMILES, cv, pure_atoms), f)
"""
print (cv)
"""----"""

####

features = {
    'MolWt': Descriptors.MolWt,
    'HeavyAtomCount': Descriptors.HeavyAtomCount,
    'HeavyAtomMolWt': Descriptors.HeavyAtomMolWt,
    'NumHAcceptors': Descriptors.NumHAcceptors,
    'NumHDonors': Descriptors.NumHDonors,
    'NumHeteroatoms': Descriptors.NumHeteroatoms,
    'NumRotatableBonds': Descriptors.NumRotatableBonds,
    'NumValenceElectrons': Descriptors.NumValenceElectrons,
    'NumAromaticRings': Descriptors.NumAromaticRings,
    'NumSaturatedRings': Descriptors.NumSaturatedRings,
    'NumAliphaticRings': Descriptors.NumAliphaticRings,
    'NumRadicalElectrons': Descriptors.NumRadicalElectrons,
    'NumAliphaticCarbocycles': Descriptors.NumAliphaticCarbocycles,
    'NumAliphaticHeterocycles': Descriptors.NumAliphaticHeterocycles,
    'NumAromaticCarbocycles': Descriptors.NumAromaticCarbocycles,
    'NumAromaticHeterocycles': Descriptors.NumAromaticHeterocycles,
    'NumSaturatedCarbocycles': Descriptors.NumSaturatedCarbocycles,
    'NumSaturatedHeterocycles': Descriptors.NumSaturatedHeterocycles
}

out_data = {}
for f in features.keys():
    out_data[f] = []

for i, smiles in enumerate(SMILES):
    
    if (i + 1) % 5000 == 0:
        print('Currently processed: {}/{}'.format(i+1, len(SMILES)))
    
    m = AllChem.MolFromSmiles(smiles)
    
    for k, v in features.items():
        out_data[k].append(v(m))
out_data['heat_capacity'] = cv
out_data['E_homo'] = E_homo
out_data['E_lumo'] = E_lumo
out_data['gap'] = gap
out_data['r2'] = r2
out_data['zpve'] = zpve
out_data['u0'] = u0
out_data['u298'] = u298
out_data['h298'] = h298
out_data['g298'] = g298






out_data = pd.DataFrame(out_data)

out_data.to_csv('Features_hc_others.csv', index = False)

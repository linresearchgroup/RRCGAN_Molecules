# -*- coding: utf-8 -*-
"""xgbReg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q54pxnQMtaffz7JGaYf2jxL1C9XOFoMo
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split, KFold, GridSearchCV, RandomizedSearchCV
from sklearn.metrics import make_scorer, mean_squared_error, r2_score, mean_absolute_error

import matplotlib.pyplot as plt
#import graphlab as gl
from sklearn.ensemble import RandomForestRegressor
from sklearn.datasets import make_regression
import time
import random
from sklearn import tree

start = time.time()

data = pd.read_csv('qm9_feature_data.csv')
X_train, X_test, y_train, y_test = train_test_split(
    data.iloc[:,:-1].values,
    data.iloc[:,-1].values
)


print (data.head())
"""
egr = RandomForestRegressor(bootstrap=True, max_samples = 1000, max_depth=2000, 
                             random_state=0,min_samples_split = 100, min_samples_leaf = 10,
                             max_features = 2, n_jobs = -1, verbose = 1) 
"""


Qs = np.quantile(y_train, [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])
y_class_train = y_train

y_class_train = np.where(y_train <= Qs[0], 0, y_class_train)
y_class_train = np.where((y_train > Qs[0]) & (y_train <= Qs[1]), 1, y_class_train)
y_class_train = np.where((y_train > Qs[1]) & (y_train <= Qs[2]), 2, y_class_train)
y_class_train = np.where((y_train > Qs[2]) & (y_train <= Qs[3]), 3, y_class_train)
y_class_train = np.where((y_train > Qs[3]) & (y_train <= Qs[4]), 4, y_class_train)
y_class_train = np.where((y_train > Qs[4]) & (y_train <= Qs[5]), 5, y_class_train)
y_class_train = np.where((y_train > Qs[5]) & (y_train <= Qs[6]), 6, y_class_train)
y_class_train = np.where((y_train > Qs[6]) & (y_train <= Qs[7]), 7, y_class_train)
y_class_train = np.where((y_train > Qs[7]) & (y_train <= Qs[8]), 8, y_class_train)
y_class_train = np.where(y_train > Qs[8], 9, y_class_train)


y_class_test = y_test

y_class_test = np.where(y_test <= Qs[0], 0, y_class_test)
y_class_test = np.where((y_test > Qs[0]) & (y_test <= Qs[1]), 1, y_class_test)
y_class_test = np.where((y_test > Qs[1]) & (y_test <= Qs[2]), 2, y_class_test)
y_class_test = np.where((y_test > Qs[2]) & (y_test <= Qs[3]), 3, y_class_test)
y_class_test = np.where((y_test > Qs[3]) & (y_test <= Qs[4]), 4, y_class_test)
y_class_test = np.where((y_test > Qs[4]) & (y_test <= Qs[5]), 5, y_class_test)
y_class_test = np.where((y_test > Qs[5]) & (y_test <= Qs[6]), 6, y_class_test)
y_class_test = np.where((y_test > Qs[6]) & (y_test <= Qs[7]), 7, y_class_test)
y_class_test = np.where((y_test > Qs[7]) & (y_test <= Qs[8]), 8, y_class_test)
y_class_test = np.where(y_test > Qs[8], 9, y_class_test)

clf = tree.DecisionTreeClassifier(random_state=0, max_depth=200)
clf = clf.fit (X_train, y_class_train)

y_class_pred = clf.predict (X_test)
print (y_class_pred)
print (y_class_test)
#plt.scatter(y_class_pred, y_class_test)
sns.scatterplot(y_class_pred, y_class_test)
plt.savefig("TreeDec.png")

#tree.plot_tree(clf)
#plt.savefig("tree.png")
r2_squared = r2_score(y_class_test, y_class_pred)
print (r2_squared)
def MAPE(y_true, y_pred):
    return np.mean(np.abs((y_true - y_pred) / y_true))

def mAPE(y_true, y_pred):
    return np.median(np.abs((y_true - y_pred) / y_true))

"""
start = time.time()
#max_depth = random.choice(max_depths)
regr = RandomForestRegressor(n_jobs = -1,max_depth = max_depth, 
                             random_state=0,verbose = 1,
                             warm_start = False             
)

regr.fit(X_train,y_train)
print (regr.get_params())
y_pred = regr.predict(X_test)
print ("feature_importances: ", regr.feature_importances_)
features = list(data.columns.values)

features.pop(-1)
print (features)


df = pd.DataFrame(regr.feature_importances_,features)
df.plot(kind='barh')
plt.savefig('features.png')
print (df)
print(y_pred)

fig, ax = plt.subplots()
plt.figure(figsize=(15,6))
plt.barh(features, regr.feature_importances_)

plt.yticks(rotation=30, ha = 'right')
plt.savefig("last.png")

print ("r-square from the model: ",regr.score (X_test, y_test))
print ("Mean of Cv_test: ",np.mean(y_test))
print ("Mean Squared Error: ",mean_squared_error(y_test, y_pred))
print ("MSE/Mean_Cv_test: ", mean_squared_error(y_test, y_pred)/np.mean(y_test))
print ("Mean absolute error: ",mean_absolute_error(y_test, y_pred))
print ("Mean_absolute_error/Mean_Cv_test: ",mean_absolute_error(y_test, y_pred)/np.mean(y_test)) 
print ("MeanAbsolutePercentage error (MAPE): ",MAPE(y_test, y_pred))
print ("MedianAbsolutePercentage error (MdAPE): ",mAPE(y_test, y_pred))
end = time.time()
print ("how long it takes: ",end-start)
"""

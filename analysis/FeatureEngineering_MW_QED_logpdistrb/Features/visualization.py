# -*- coding: utf-8 -*-
"""visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rdcztIcFmI73lqgl73GgrJdqbVxB2xH8
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import spectral_clustering
from rdkit.Chem import Crippen as logp
from rdkit.Chem import rdMolDescriptors as tpsa
from rdkit.Chem import QED as QED


data = pd.read_csv ('Features_hc_qm9.csv')
gen_data = pd.read_csv ('FeaturesRegular_NODUP_60ksam_13joback.csv')
"""for c in data.columns[:-1]:
    print('Variance of column {}: {}'.format(c, np.var(data[c])))
"""

data.drop('NumRadicalElectrons', axis = 1, inplace = True)
data.drop('NumAromaticCarbocycles', axis = 1, inplace = True)

gen_data.drop('NumRadicalElectrons', axis = 1, inplace = True)
gen_data.drop('NumAromaticCarbocycles', axis = 1, inplace = True)

print (len(data))
#data = data.loc [data['heat_capacity']>25]
#data = data.loc [data['heat_capacity']<40]

print (len(data))

plt.figure(figsize = (20,20))
hist_feat = ['MolWt','HeavyAtomMolWt','NumHAcceptors',
             'NumHDonors','NumHeteroatoms', 'NumRotatableBonds', 'NumValenceElectrons', 
             'NumSaturatedRings','Logp','TPSA','QED','heat_capacity']
j=0
for i, c in enumerate(data.columns):
    try:
     if c in hist_feat:
      plt.subplot(3,3,(j + 1))
      #sns.scatterplot(data[c].values, data.iloc[:,-1].values)
      sns.distplot(data[c].values)
      #plt.hist(data[c].values, bins=40, density=True)
      if c=='MolWt':
          plt.xlim (80,190)
      if c=='HeavyAtomMolWt':
          plt.xlim (80,190)

      #sns.scatterplot(gen_data[c].values, gen_data.iloc[:,-1].values)
      sns.distplot(gen_data[c].values)
      #plt.hist(gen_data[c].values, bins=80, density=True)
      if c=='MolWt':
          plt.xlim (80,190)
      if c=='HeavyAtomMolWt':
          plt.xlim (80,190)

      plt.title('{}'.format(c), fontsize = 12)
      plt.legend(labels = ['qm9','generated Smiles'], loc="upper right")
      plt.savefig("CvVSfeat.png")
      j +=1
    except:
     pass
# plot logp distribution
plt.close()
sns.set_style("white")
sns.distplot(data['Logp'])
sns.distplot(gen_data['Logp'])
plt.xlabel("Partition coefficient (logP)")
plt.legend(labels = ['qm9','generated Smiles'], loc="upper right")
plt.savefig('logp.png')

# plot molW distribution
plt.close()
sns.set_style("white")
sns.distplot(data['MolWt'])
sns.distplot(gen_data['MolWt'])
plt.xlabel("Molecular weight")
plt.legend(labels = ['qm9','generated Smiles'], loc="upper right")
plt.savefig('logp.png', dpi = 1000)

# plot tpsa distribution
plt.close()
sns.set_style("white")
sns.distplot(data['TPSA'])
sns.distplot(gen_data['TPSA'])
plt.xlabel("tpsa")
plt.legend(labels = ['qm9','generated Smiles'], loc="upper right")
plt.savefig('tpsa.png')

# plot qed distribution
plt.close()
sns.set_style("white")
sns.distplot(data['QED'])
sns.distplot(gen_data['QED'])
plt.xlabel("QED")
plt.legend(labels = ['qm9','generated Smiles'], loc="upper right")
plt.savefig('qed.png')

#sns.scatterplot(data[c].values, data.iloc[:,-1].values)
c = 'MolWt'
sns.distplot(data[c].values)
#sns.scatterplot(gen_data[c].values, gen_data.iloc[:,-1].values)
sns.distplot(gen_data[c].values)

plt.title('{} vs Heat Capacity'.format(c), fontsize = 12)
plt.savefig("feat_hist.png")


plt.close()


scaler = StandardScaler()
X = scaler.fit_transform(data.iloc[:,:-1].values)

print (X.shape)
print (X)
"""
tsne = TSNE()
X_tsne = tsne.fit_transform(X)
plt.close("all")

plt.subplot(1,2,1)
sns.scatterplot(X_tsne[:,0], data.iloc[:,-1].values)
#plt.savefig("tsne1.png")

plt.subplot(1,2,2)
sns.scatterplot(X_tsne[:,1], data.iloc[:,-1].values)
plt.savefig("tsne.png")

plt.close("all")
ax1 = sns.scatterplot(X_tsne[:,0],X_tsne[:,1], hue = data.iloc[:,-1].values)
plt.savefig("tsne_double.png")

plt.close("all")
pca = PCA(n_components = 2)
X_pca = pca.fit_transform(X)


plt.subplot(1,2,1)
sns.scatterplot(X_pca[:,0], data.iloc[:,-1].values)


plt.subplot(1,2,2)
sns.scatterplot(X_pca[:,1], data.iloc[:,-1].values)
plt.show()
plt.savefig("pca.png")

plt.close("all")

ax1 = sns.scatterplot(X_pca[:,0],X_pca[:,1], hue = data.iloc[:,-1].values) 
plt.savefig("pca_double.png")
print ("end of the file")
"""
